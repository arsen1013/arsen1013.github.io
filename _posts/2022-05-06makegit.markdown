---
layout: post
title: 깃허브 사용법
date: 2022-05-06 19:20:23 +0900
category: sample
---


# 깃허브(github)

과목분류: 컴퓨터 언어

[깃허브 홈페이지 만들기](https://www.notion.so/1006237f14d44329917d577bf8215372)

### 깃허브란?

- 분산 버전 관리 툴인 깃 저장소 호스팅을 지원하는 웹 서비스이다.
- 무상 서비스를 모두 제공
- 깃이 텍스트 명령어 입력 방식인데 반해, 깃허브는 그래픽 유저 인터페이스(GUI)를 제공한다.
- 깃허브는 페이스트빈(pastebin)과 유사한 서비스인 Gist와 위키를 각 저장소마다 운영하고 있으며, 깃 저장소를 통해 고칠 수 있다.

### 깃허브 용어

로컬저장소에서 원격저장소로 옮길때 잠시 인덱스 저장소에 저장된다. 

- Init
소스코드 파일을 Git으로 관리하기 위하여 Git 저장소를 초기화 하는 명령어
- Clone
Github 상 오픈소스 혹시 이미 만들어져 있는 원격 저장소의 파일을 복제해와서 사용하는 명령어 ⇒ 이 명령어 코드를 사용하면 손수 다운로드 버튼을 클릭하지 않아도 다운받아진다.
- Add
Commit 할 준비가 끝난 파일을 인덱스 저장소에 저장하는 명령어 ⇒ 원격저장소에 올리기 전에 먼저 Add라는 명령어를 이용해서 임시 저장소에 올려준다.
- Commit
소스코드의 업데이트를 확정하는 의미로 확정된 코드와 커밋 메시지를 함께 로컬 저장소에 반영한다. 아직 원격 저장소에는 반영되지 않는다. 아무리 커밋해도 깃허브 레파지토리엔 저장 X
- Pull
원격 저장소의 내용을 로컬 저장소에 반영하는 것(가장 최신의 버전으로 업데이트) 깃허브를 사용할때 너무 중요하다. 공동작업할때는 꼭 최신 데이터 위에 내가 코드를 써야 서로 엉키지 않는다.
- Push
Commit으로 업데이트 할 파일을 확정한 뒤, 원격 저장소에 반영하는 것. 로컬 저장소에서 원격 저장소로 업로드
- Branch
독립적으로 개발하는 것을 의미. 원격 저장소의 코드를 통째로 복사하여 기존의 코드와 상관없이 독립적으로 개발 진행이 가능. ‘fork’ 하게되면 상대방의 콛를 내 레파지토리에 그대로 복사해서 완전히 독립 개체로 코딩할 수 있는 것이고 ‘branch’는 합성이 가능하다는 차이점이 있다.
- Merge
병합을 의미. 하나의 브랜치 작업을 다른 브랜치에 통합하는 것.
- Checkout
사용중인 Branch를 변경하는 기능

---

커멘드라인에서 명령어를 쓰기 위해 깃을 설치한다. 홈페이지에서 조작하고 싶으면 깃허브를 쓰자. 

- 깃 설치 [https://git-scm.com/download/win](https://git-scm.com/download/win)
- 깃허브 가입  [https://github.com/](https://github.com/)

### 레파지토리 생성

레파지토리 생성 버트는 곳곳에 숨어있다. repository new 를 누르면 다 괜찮고 상단 프로필 + 버튼을 눌러도 바로가기 키가 있다. 

![image](https://user-images.githubusercontent.com/55439985/167068588-eff76762-2fbc-472a-8845-abf5c7154d47.png)
![image](https://user-images.githubusercontent.com/55439985/167068605-ef4d2642-8520-4cf3-bc59-b718ff506642.png)


readme 는 이 오픈 코드가 무엇인지 설명해주는 파일로 가능한 체크해주면 좋다. 

![image](https://user-images.githubusercontent.com/55439985/167068623-7033ca31-590d-4537-9e4e-c6b69a70c4de.png)


create reposigitory 클릭 

![image](https://user-images.githubusercontent.com/55439985/167068645-a48f5e03-491c-410e-b14e-470899f55ca3.png)

![image](https://user-images.githubusercontent.com/55439985/167068663-66e21fd4-a791-4f0c-8c57-91d80b88a839.png)

settings 누르면 설정 변경 가능 , 이름 변경도 가능하다. 

깃허브 데스크탑 설치 [https://desktop.github.com/](https://desktop.github.com/)

가입하고 나면 GUI에서 아주 간편하게 작업이 가능하다. 

![image](https://user-images.githubusercontent.com/55439985/167068676-75b64dd4-78fc-4fe6-a8da-a2c15996f090.png)

레파지토리를 연결하기 위해 깃(git)을 사용할 경로와 폴더를 만든다. 

![image](https://user-images.githubusercontent.com/55439985/167068687-994e4b15-a657-489d-b934-33e07eeb5200.png)

```python
>> cd c 
c:\
>>PS C:\> mkdir git #c 폴더에 git 이라는 폴더 생성 
>> PS C:\> cd git 
>> PS C:\> git clone http://본인레파지토리 주소 복사 붙여넣기
>>PS C:\git\git_sign_test> dir 
```

![image](https://user-images.githubusercontent.com/55439985/167068701-e98a3090-2907-4be5-9499-83a75a1b9bef.png)

보기 > 표시 > 숨긴항목표시 체크해야 .git 폴더가 보인다. 

![image](https://user-images.githubusercontent.com/55439985/167068717-08a469cf-f0a4-4928-95ec-cf9b4a3145c2.png)
이게 없으면 init 이 있어야 하는데, 클론을 먼저하면 init을 안해도 된다. 그래서 순서상 레파지토리 먼저 만들고 클론 생성하면 된다. 인잇을 하게 되면 명령어가 먹지 안흔다. 

인잇 따로 작업하는 것보다 이게 훨씬 편하다. 

### 깃허브 사용법(CMD)

cmd 창에서 마저 작업하자 

먼저 계정을 등록해야한다. 

사용할 유저 명과 이메일을 각각 등록해준다. 

```python
PS C:\git\git_sign_test> git config --global user.name "arsen1013(가입한 유저 명)"
```

입력했을때 별다른 메세지가 나오지 않으면 잘 등록된거다.  

```python
PS C:\git\git_sign_test> git config --global user.email "anny0040@naver.com(가입한 유저 이메일)"
```

클론 한 폴더에 html 파일 하나 생성해보자. git 에서 제공하는 웹서비스를 보기 위해 html 하나 만들어서 clone한 폴더에 집어넣고 이 파일을 add하고 커밋하고 푸시까지 해보자. 

vs code 나 사용하는 편한 코드 에디터로 들어가서 방금 생성한 파일 경로에 html 파일 하나 만들어준다. 

html 기본 코드를 생성하는 단축키는 ! 다  파일명은 편하게 index.html 로 했다. 

![image](https://user-images.githubusercontent.com/55439985/167068734-1483f3ca-4684-4261-93e0-b3484a1c98b2.png)


cmd 창에서 dir 를 입력하면 html 파일이 잘 만들어 진것을 볼 수 있다. 

![image](https://user-images.githubusercontent.com/55439985/167068744-7f196b96-caff-4595-b1d2-dad2581367b9.png)


본격적으로 html 폴더를 레포지터리에 연동해보자. 

다음의 순서로 명령어를 입력해준다. 

- add ; 인덱스저장소에 임시로 저장해줄 폴더 저장한다.

```python
PS C:\git\git_sign_test> git add index.html
```

- commit을 할때 커밋 뒤에 메세지를 같이 보내줘야 한다.
    
    커밋 안해주면 오류난다. 
    

```python
PS C:\git\git_sign_test> git commit -m "first comit"
```

이걸 하고나서도 아직까지 내 깃허브 홈페이지의 레파지토리는 변함이 없다. 

- push :  본격적으로 레파지토리에 보내주기

```python
PS C:\git\git_sign_test> git push origin main
```

이거 하고나면 깃이랑 깃허브랑 연동시키라는 팝업이 뜬다. 연동하겠다고 체크하면 연동되고 코드가 잘 먹힌다. 

![image](https://user-images.githubusercontent.com/55439985/167068761-db33ffbe-0f4f-4733-a039-a0f1078d6591.png)

index.html이 잘 들어갔다. 

물론 이 모든것을 금방 끝내줄 단 하나의 마스터키가 있지만 이것은 하단에 알아보도록 하자. 

branch 사용헙 서브 브렌치에서 작업해보기

```python
PS C:\git\git_sign_test> git branch
* main 
# * 은 현재 내가 사용하고 있는 브랜치를 표시해주는 것이다. 
```

```python
PS C:\git\git_sign_test> git branch sub1
```

```python
PS C:\git\git_sign_test> git checkout sub1
```

![image](https://user-images.githubusercontent.com/55439985/167068786-8ce1f9a1-8018-4bee-9c98-26e6220ac4f3.png)


다시한번 git branch 를 입력하면 * 표시가 sub1 으로 옮겨진 것을 확인할 수 있다. 

![image](https://user-images.githubusercontent.com/55439985/167068802-71a6733b-38ba-4efb-8a78-17e751a14ab3.png)


```python
PS C:\git\git_sign_test> git add sub_page.html
PS C:\git\git_sign_test> git commit -m "second commit"
```

![image](https://user-images.githubusercontent.com/55439985/167068860-ae858427-fa4a-4c28-809d-234249d98634.png)


![image](https://user-images.githubusercontent.com/55439985/167068877-de26a05a-ad85-4d71-888b-63812a6da838.png)

commit 할때 작성한 “second commit” 라는 것은 파일 옆에 붙는 각주같은 메세지다. 말하자면 메타데이터를 생성해주는 목적으로 사용하면 된다. 블록체인 같은 곳에선 중요하게 여겨진다. 쓰기 나름. 

```python
PS C:\git\git_sign_test> git push origin sub1
```

![image](https://user-images.githubusercontent.com/55439985/167068889-46afee59-18d7-439b-83a8-2d931254e684.png)


main 에는 여전히 html 파일이 올라오지 않았지만  sub1 이라는 branch를 눌러서 옮기면 sub_page.html 이 들어와 있음을 확인할 수 있다. 

![image](https://user-images.githubusercontent.com/55439985/167068895-e91c2ce4-8b54-422d-849e-146d678a063e.png)
![image](https://user-images.githubusercontent.com/55439985/167068904-6e9991c5-1b83-498b-81ac-50ba9f7d94b2.png)

main 에는 없고 branch에만 sub1이 들어왔다. 이런 식으로 버전관리를 할 수 있다. 

branch를 왜 만들까? 

main하나 만들어두고 branch에 여러 개발자들이 각자의 브랜치를 만들어 개발한다.  파일이 5개가 있다면 5명의 개발자가 한사람당 하나의 파일을 수정할 수 있다. 
그때 5명의 개발자가 main 하나에서 모두 수정을 하면 코드가 꼬여버릴 수 있다. 

그래서 브렌치를 만들어서 각자 작업하고 main 관리자에게 “나 작업 끝났어요.” 라고 해서 브랜치 작업을 합칠 수 있다.  

![image](https://user-images.githubusercontent.com/55439985/167068920-53fe8a85-cf2f-4960-bb44-4cfcecc0c056.png)

```python
PS C:\git\git_sign_test> git checkout main
Switched to branch 'main'
Your branch is up to date with 'origin/main'.
PS C:\git\git_sign_test> git branch
  checkout
* main
  sub1
PS C:\git\git_sign_test> git merge sub1
Updating 5d9803e..1445d7a
Fast-forward
 sub_page.html | 12 ++++++++++++
 1 file changed, 12 insertions(+)
 create mode 100644 sub_page.html

PS C:\git\git_sign_test> git push origin main
Total 0 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/arsen1013/git_sign_test
   5d9803e..1445d7a  main -> main
```

main과 branch를 비교해서 바뀐점을 찾아 그것을 반영해주는 작업을 진행한다. 

![image](https://user-images.githubusercontent.com/55439985/167068946-0d3a0260-766d-49ff-8073-5de21d5c6d0e.png)

main에도 파일이 들어가있다. 

옮긴 branch는 필요없으니 지워준다. 

```python
PS C:\git\git_sign_test> git branch -d sub1

```

![image](https://user-images.githubusercontent.com/55439985/167068960-905420e9-98bd-4980-987c-fdc1172175cc.png)
깃의 branch 에서 사라진 것을 확인할 수 있다. 하지만 그렇다고 github 에서 사라진 것은 아니다. 

깃허브에서도 지워주고 싶으면 origin 안에서 delete 명령어를 써줘야 한다. 

```python
PS C:\git\git_sign_test> git push origin --delete sub1
```

![image](https://user-images.githubusercontent.com/55439985/167068985-f53d19bc-9c3d-4435-81ad-dadf2d7752d3.png)

sub1 이 사라진 것을 확인할 수 있다. 

### 깃허브 데스크탑 사용법

설치하고 계정 로그인까지 한 다음의 화면이다.  cmd 에서 클론해서 저장한 경로랑 깃허브 데스크탑에서 clone 저장소로 사용하는 path가 다르다.

따라서 경로를 잘 생각해서 코드를 수정해야 한다. cmd와 연결된 path로 받아 수정했다면 commit 도 해당 경로의 클론을 cmd 창에서 커밋해야한다. 

깃허브 데스크탑에서 클론한 코드를 열었다면 그 코드가 있는 경로의 코드를 수정해서 commit 해야한다.  

![image](https://user-images.githubusercontent.com/55439985/167069016-58966307-0dab-41a9-995d-09804fc911aa.png)

옆에서 만든 폴더 눌러서 clone 까지 누르면 된다. 

![image](https://user-images.githubusercontent.com/55439985/167069031-1760b5a1-2468-4b0e-9e4d-f940e1cd025f.png)

저 화면에서 

open in visual studio code : 클릭하면 바로 저 폴더를 잡아 VScode 가 열린다. ← cmd으로 다운받은 클론과 다른 폴더에 저장되므로, 꼭 open visual studio code 버튼을 눌러서 들어가도록 한다. 

view on GitHub 를 누르면 바로 연결된다. 

레파지토리를 연결하고 싶으면 

![image](https://user-images.githubusercontent.com/55439985/167069056-f10c218c-b480-4ff7-8517-6b372122e452.png)

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2026.png)

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2027.png)

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2028.png)

다시 open in visual studio code 를 열어서 

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2029.png)

코드를 수정하고 ctrl + s 로 저장한다. 

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2030.png)

수정하면 초록색줄로 깃헙 데스크탑에 잡힌다. 삭제된 것은 빨간색으로 뜬다. 왼쪽 하단의 commit to main을 눌러준다. 

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2031.png)

push origin 을 누른다. 

깃허브에서 코드를 열어보니 잘 반영되어있다. 

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2032.png)

pull 이라는 명령어는 매치를 다시 맞춰주기 위해서 원본 레파치토리랑 연결하는 작업을 해준다. 

깃헙 데스크탑에서는 원본 코드와 현재 데스크탑에 있는 코드 버전이 다르면 pull 버튼이 자동으로 생긴다. 그때 pull 버튼을 눌러서 연동해주고 그 다음에 코드 수정을 하면 된다. 

### 마크다운 언어

모든 html 언어를 대체하지 못하지만 간단하고 쉽다. 텍스트 파일이라 용량이 작다는 이점도 있다. 

단, 표준이 없어서 열리는 툴마다 보이는 디자인이 조금씩 다르다. (가장 큰 단점이다.) 

```python
제목 
=

부제목 
-

# 목차 1
## 목차 2
### 목차 3
#### 목차 4
##### 목차 5
###### 목차 6 

> 인용문 
>   > 인용문 2 
>   >   > 인용문 3
```

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2033.png)

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2034.png)

```python
# list 

1. 리스트 1
2. 리스트 2
3. 리스트 3

-  리스트 1
    -  리스트 2
        -  리스트 3

* 리스트 1 
+ 리스트 1# code 

```

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2035.png)

```python
# code 

        i = 0
        #들여쓰기 두 번 하고 코드 입력

``` i = 0 ```

``` python
i = 0
i + 1
print(i)
```

``` python  <- 파이썬으로 코드를 치겠다는 것, 인식이 이렇게 된다.  

#누가 어떻게 여느냐에 따라 보여지는 것이 다르다.
```

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2036.png)

```python
## 수평선 
-------

***********
```

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2037.png)

마크다운 표는 에디터에서 작성하고 복사 붙여넣기 하는 것이 훨씬 빠르다. 

마크다운 표작성 도와주는 에디터  : [https://www.tablesgenerator.com/](https://www.tablesgenerator.com/)

마크다운 에디터 : [https://stackedit.io/app#](https://stackedit.io/app#)

각종 마크다운 에디터를 쓰는게 좋다. 

```python
![Alt text](https://t1.daumcdn.net/cfile/tistory/24283C3858F778CA2E) 
#이 경우 사이즈 조절이 어렵다. 

<img src = "https://t1.daumcdn.net/cfile/tistory/24283C3858F778CA2E" width = 40% >
```

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2038.png)

이미지를 연결한 마크다운 코드를 [README.md](http://README.md) 에 그대로 붙여넣기 해서 commit 해본다. 

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2039.png)

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2040.png)

파일 두개 이상이면 commit 버튼이 활성화가 되지 않는다.  commit 메세지를 입력하면 버튼이 활성화 된다. 

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2041.png)

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2042.png)

<aside>
💡 폴더를 한거번에 올리고 싶다면?

</aside>

이전에 작업했던 폴더가 있다면 그 폴더를 그대로 복사해두고 

show in explore 에서 연 폴더에 붙여넣기 해준다. 

해당 파일에 대한 commit massage 를 작성하고 commit를 클릭, push까지 해주면 그대로 올라간다. 

### 깃허브 웹서버 구축

파이썬 플라스크 라이브러리를 활용하듯, 깃허브에서도 웹서브 구축이 가능하다. 

레파지토리에서 위에 상단에 setting 화면으로 들어간다. 

setting > pages > 

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2043.png)

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2044.png)

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2045.png)

branch 를 눌러 none을 main으로 바꿔주고 save 해준다. 

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2046.png)

준비됐다는 링크가 상단에 올라온다. 해당 링크로 홈페이지가 열린다. 

### GCP(Google Cloud Platform) 구축 방법

웹서버를 만들기 위해 구글 클라우드 플랫폼을 쓴다. 잘못 사용하면 비용이 청구된다. 내 컴퓨터에서 작업하고 있는 작업물을 웹으로 공개해서 여러명이서 공동작업하고 싶을때 GCP에 파일을 가져다 놓고 사용할 수 있다. 

리눅스환경이다. 

[https://console.cloud.google.com/getting-started?hl=ko&pli=1](https://console.cloud.google.com/getting-started?hl=ko&pli=1)

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2047.png)

화면 좌측메뉴에

방화벽에 https http 둘 다 체크해줘야 한다. 

![Untitled](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/Untitled%2048.png)

리눅스환경을 추가로 관리해보고 싶다면 윈도우의 경우 [https://ko.wikipedia.org/wiki/버추얼박스](https://ko.wikipedia.org/wiki/%EB%B2%84%EC%B6%94%EC%96%BC%EB%B0%95%EC%8A%A4) 를 사용해서 돌릴 수 있다. 

단, 일반 노트북은 무리고 성능 좋은 팬이 달린 데스크탑으로 쓰는 것이 좋다. 

[GCP.pptx](%E1%84%80%E1%85%B5%E1%86%BA%E1%84%92%E1%85%A5%E1%84%87%E1%85%B3(github)%209cfa52ad3ee444e7a0ecb7db77fdf141/GCP.pptx)
